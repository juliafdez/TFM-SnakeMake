#REFERENCE ="data/genome.fa"
#Workflow con ficheros fastqc ejemplo.
#Cambiar por los reales para las pruebas

#configfile: 'config.yaml'
#SAMPLES=["bsseq_sample1_R1","bsseq_sample1_R2", "bsseq_sample2_R1","A"]
SAMPLES=["SRR1272791_1", "SRR1272791_2"]
rule all:
    input:
        "qc/fastqc/SRR1272791_1.html",
        "qc/fastqc/SRR1272791_2.html",
#        "mapped_reads/bsseq_sample1_R1.bam"
#        "trimmed/SRR1272791_1.fastq.gz",
#        "trimmed/SRR1272791_1.fastq.gz",
        "qc/multiqc.html",
#        "data/Bisulfite_Genome",
#        "data/genomic_nucleotide_frequencies.txt",
        "bams/SRR1272791_1.bam",
        "bams/SRR1272791_2.bam",
        "meth/SRR1272791_1.M-bias.txt",
        "meth/SRR1272791_2.M-bias.txt",
        "qualimap/SRR1272791_1.qualimapReport.html",
        "qualimap/SRR1272791_2.qualimapReport.html",
        "dedup/SRR1272791_1.deduplicated.bam",
        "dedup/SRR1272791_2.deduplicated.bam"
#        "dedup/bsseq_sample1_R1.bam"

rule fastqc:
    message: "Performing FastQC..."
    input:
        #"data/samples/{sample}.fastq"
        expand("data/samples/{sample}.fastq.gz", sample=SAMPLES)
    output:
        html="qc/fastqc/{sample}.html",
        zip="qc/fastqc/{sample}_fastqc.zip"
    params: "--quiet"
    log:
        "logs/fastqc/{sample}_fastqc.log"
    threads: 1
    wrapper:
        "0.80.2/bio/fastqc"

rule trim_galore:
    message: "Performing Trimming..."
    input:
        r1=expand("data/samples/{sample}.fastq.gz", sample=SAMPLES)
        #r1="data/samples/{sample}.fastq"
    output:
        #expand("trimmed/{sample}.fq.gz", sample=config["samples"]),
        #expand("trimmed/{sample}_gz_trimming_report.txt", sample=config["samples"])
        "trimmed/{sample}.fastq.gz",
        "trimmed/{sample}_gz_trimming_report.txt"
    params:
        extra="--illumina -q 20"
    log:
        #expand("logs/trim_galore/{sample}.log", sample=config["samples"])
        "logs/trim_galore/{sample}.log"
    shell:
        """
        trim_galore {input.r1} --output_dir trimmed
        """
#    wrapper:
#        "0.80.2/bio/trim_galore/se"
#    #conda:
#    #    "enviroment.yaml"
#    #script:
#    #    "scripts/trim_galore.py"
#
#
##    shell:
##    #    "trim_galore --gzip -o A/trimmmed/ --paired {input}"
##        "trim_galore {input} -o ../results/trimmed/ {params} --cores {threads} &> {log}"
    #wrapper:
        #"http://dohlee-bio.info:9193/trim-galore"
     #  "0.80.2/bio/trim_galore/se"
#

rule multiqc:
    input:
        expand("trimmed/{sample}_trimmed.fq.gz", sample=SAMPLES),
        expand("data/samples/{sample}.fastq.gz", sample=SAMPLES)
        #"trimmed/A_trimmed.fq.gz",
        #"data/samples/A.fastq"
    output:
        "qc/multiqc.html"
    log:
        "logs/multiqc.log"
    wrapper:
        "0.80.2/bio/multiqc"

rule bismark_genome_preparation_fa:
    input:
        read="data/chr22.fa"
    output:
        directory("data/Bisulfite_Genome")
    log:
        "logs/indexes/Bisulfite_Genome.log"
    wrapper:
        "0.80.2/bio/bismark/bismark_genome_preparation"

rule bam2nuc_for_genome:
    input:
        genome_fa="data/release_104/Homo_sapiens.GRCh38.dna.chromosome.22.fa"
    output:
        "data/genomic_nucleotide_frequencies.txt"
    log:
        "logs/indexes/genome/genomic_nucleotide_frequencies.txt.log"
    wrapper:
        "0.80.2/bio/bismark/bam2nuc"

rule bismark_align:
    message: "Performing alignment..."
    input:
        fq=expand("data/samples/{sample}.fastq.gz", sample=SAMPLES),
        genome="data/release_104/Homo_sapiens.GRCh38.dna.chromosome.22.fa",
        #genome=expand("data/{genome}.fa", sample=GENOMES),
        bismark_indexes_dir="data/release_104/Bisulfite_Genome",
        genomic_freq="data/release_104/genomic_nucleotide_frequencies.txt"
        #genome="data/genome.fa"
    output:
        bam="bams/{sample}.bam",
        report="bams/{sample}_SE_report.txt",
        nucleotide_stats="bams/{sample}_.nucleotide_stats.txt",
        bam_unmapped="bams/{sample}_unmapped_reads.fq.gz",
        ambiguous="bams/{sample}_ambiguous_reads.fq.gz"
    log:
        "logs/bams/{sample}.log"
    params:
        # optional params string
        extra=' --ambiguous --unmapped --nucleotide_coverage',
        basename='{sample}'
    wrapper:
        "0.80.2/bio/bismark/bismark"
#    shell:
#        """
#        bismark --bowtie1 --multicore 2 -n 1 -l 28 --gzip --nucleotide_coverage {params.ref} {input.r1}
#        """
#    conda:
#    #    "environment.yaml"
#    wrapper:
#        "http://dohlee-bio.info:9193/bismark/genome-preparation"
#    shell:
#        """
#        bismark --bowtie2 --multicore 2 -n 1 -l 28 --gzip --nucleotide_coverage {params.ref} {input.r1} --output_dir saved
#        """
#    wrapper:
#        "0.80.2/bio/bismark/bismark"
#    params:
#        # optional params string
#        extra=' --ambiguous --unmapped --nucleotide_coverage',

rule bismark_methylation_extractor:
    input: "bams/{sample}.bam"
    output:
        mbias_r1="qc/meth/{sample}.M-bias_R1.png",
        # Only for PE BAMS:
        # mbias_r2="qc/meth/{sample}.M-bias_R2.png",

        mbias_report="meth/{sample}.M-bias.txt",
        splitting_report="meth/{sample}_splitting_report.txt",

        # 1-based start, 1-based end ('inclusive') methylation info: % and counts
        methylome_CpG_cov="meth_cpg/{sample}.bismark.cov.gz",
        # BedGraph with methylation percentage: 0-based start, end exclusive
        methylome_CpG_mlevel_bedGraph="meth_cpg/{sample}.bedGraph.gz",

        # Primary output files: methylation status at each read cytosine position: (extremely large)
        read_base_meth_state_cpg="meth/CpG_context_{sample}.txt.gz",
        # * You could merge CHG, CHH using: --merge_non_CpG
        read_base_meth_state_chg="meth/CHG_context_{sample}.txt.gz",
        read_base_meth_state_chh="meth/CHH_context_{sample}.txt.gz"
    log:
        "logs/meth/{sample}.log"
    params:
        output_dir="meth",  # optional output dir
        extra="--gzip --comprehensive --bedGraph"  # optional params string
    wrapper:
        "0.80.2/bio/bismark/bismark_methylation_extractor"

rule qualimap:
    input:
        # BAM aligned, splicing-aware, to reference genome
        #"bismark/{sample}_bismark_pe.bam",
        "bams/{sample}.bam"
        # GTF containing transcript, gene, and exon data
    output:
        "qualimap/{sample}.qualimapReport.html"
    log:
        "logs/qualimap/{sample}.log"
    wrapper:
        "0.80.2/bio/qualimap/bsseq"

#paso opcional deduplicates con picard
rule deduplicate_bismark:
    input: "bams/{sample}.bam"
    output:
        bam="dedup/{sample}.deduplicated.bam",
        report="dedup/{sample}.deduplication_report.txt",
    log:
        "logs/bams/{sample}.deduplicated.log",
    params:
        extra=""  # optional params string
    wrapper:
        "0.80.2/bio/bismark/deduplicate_bismark"
